{"version":3,"sources":["App.js","index.js"],"names":["moment","require","timeZones","tz","names","App","useState","DateStatus","SetDateStatus","formateChange","setformateChange","fromtimeZone","setFromTimeZone","totimeZone","setToTimeZone","format","fromtime","setfromTime","totime","settoTime","todayDate","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","className","style","color","marginTop","marginRight","marginLeft","fontWeight","checked","size","offstyle","onChange","height","onlabel","offlabel","onstyle","formatechange","class","id","type","width","value","e","target","aria-label","aria-describedby","list","val","t1","clone","setFromTime","map","timezone","t2","setToTime","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9890db3.chunk.js","sourcesContent":["import React,{Fragment,useState} from 'react';\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\nimport './App.css';\n\nvar moment = require('moment-timezone');\nvar timeZones = moment.tz.names();\n\nfunction App() {\n\n  const [DateStatus,SetDateStatus] = useState(true);\n  const [formateChange,setformateChange] = useState(true);\n  const [fromtimeZone,setFromTimeZone] = useState(timeZones[282]);\n  const [totimeZone,setToTimeZone] = useState(timeZones[451]);\n  const [fromtime,setfromTime] = useState(moment.tz(moment(), timeZones[282]).format('hh:mm a'));\n  const [totime,settoTime] = useState(moment.tz(moment(), timeZones[451]).format('hh:mm a'));\n\n  var todayDate = new Date();\n  var dd = String(todayDate.getDate()).padStart(2, '0');\n  var mm = String(todayDate.getMonth() + 1).padStart(2, '0'); \n  var yyyy = todayDate.getFullYear();\n  todayDate = dd + '/' + mm + '/' + yyyy;\n\n  function setFromTime(val){\n    setFromTimeZone(val);\n    var t1 = moment.tz(totime,'h:mm A',totimeZone);\n    \n    if(val !== \"\")\n    {\n      if(formateChange){\n        setfromTime(t1.clone().tz(val).format('h:mm A'));\n      }\n      else{\n        setfromTime(t1.clone().tz(val).format('HH:mm'));\n      }\n      \n    }\n  } \n\n  function setToTime(val){\n    setToTimeZone(val);\n    var t2 = moment.tz(fromtime,'h:mm A',fromtimeZone);\n    \n    if(val !== \"\")\n    {\n      if(formateChange)\n      {\n        settoTime(t2.clone().tz(val).format('h:mm A'));\n      }\n      else{\n        settoTime(t2.clone().tz(val).format('HH:mm'));\n      }      \n    }\n  }\n\n  function formatechange(checked){\n    setformateChange(checked);\n    if(!checked)\n    {\n      setfromTime(moment(fromtime,'h:mm A').format('HH:mm'));\n      settoTime(moment(totime,'h:mm A').format('HH:mm'));\n    }\n    else{\n      setfromTime(moment(fromtime,'HH:mm').format('h:mm A'));\n      settoTime(moment(totime,'HH:mm').format('h:mm A'));\n    }\n  }\n\n  return (\n    <Fragment>\n    <h1 className=\"text-center mb-4\" style={{color:'whitesmoke',marginTop:'10%'}}>Time Zone Converter</h1>\n    <div className=\"container\">\n    <label style={{marginRight:'10px',marginLeft:'370px',fontWeight:'bold',color:'whitesmoke'}}>Date Display :</label>\n    <BootstrapSwitchButton checked={DateStatus} size=\"sm\" offstyle=\"danger\" onChange={checked=>SetDateStatus(checked)} />\n\n  <label style={{marginLeft:'30px',marginRight:'10px',fontWeight:'bold',color:'whitesmoke'}}>Time format : </label>\n  <BootstrapSwitchButton checked={formateChange} size=\"sm\" height=\"20px\" onlabel=\"12\" offlabel=\"24\" offstyle=\"success\" onstyle=\"primary\" onChange={checked=>formatechange(checked)}/><hr/>\n    <div className=\"row\">\n    <div className=\"col-md\">\n    <div class=\"input-group mb-3\">\n    <div class=\"input-group-prepend\">\n      <span class=\"input-group-text\" id=\"inputGroup-sizing-default\" >Enter Time</span>\n    </div>\n    <input type=\"text\" style={{width:'200px',}} class=\"form-control\" value={fromtime}  onChange={e=>setfromTime(e.target.value)}  aria-label=\"Default\" aria-describedby=\"inputGroup-sizing-default\"/>\n  </div>\n\n  <div>{\n    DateStatus && <div class=\"input-group mb-3\">\n    <div class=\"input-group-prepend\" >\n      <span class=\"input-group-text\" id=\"inputGroup-sizing-default\">Enter Date</span>\n    </div>\n    <input type=\"text\" class=\"form-control\" value={todayDate} aria-label=\"Default\" aria-describedby=\"inputGroup-sizing-default\"/>\n    </div>\n  } \n  </div>\n\n  <input type=\"text\" class=\"form-control\" list=\"zones\" value={fromtimeZone}  onChange= {e => setFromTime(e.target.value)} />\n    <datalist id=\"zones\">\n    {timeZones.map((timezone) => <option value={timezone}>{timezone}</option>)}\n    </datalist>\n  <hr/>\n    </div>\n\n    <div className=\"col-md\">\n    <div class=\"input-group mb-3\">\n    <div class=\"input-group-prepend\">\n      <span class=\"input-group-text\" id=\"inputGroup-sizing-default\">Enter Time</span>\n    </div>\n    <input type=\"text\" style={{width:'200px',}} class=\"form-control\" value={totime} onChange={e=>settoTime(e.target.value)} aria-label=\"Default\" aria-describedby=\"inputGroup-sizing-default\"/>\n  </div>\n\n  <div>{\n    DateStatus && <div class=\"input-group mb-3\">\n    <div class=\"input-group-prepend\" >\n      <span class=\"input-group-text\" id=\"inputGroup-sizing-default\">Enter Date</span>\n    </div>\n    <input type=\"text\" class=\"form-control\" value={todayDate} aria-label=\"Default\" aria-describedby=\"inputGroup-sizing-default\"/>\n    </div>\n  } \n  </div>\n\n  \n  <input type=\"text\" class=\"form-control\" list=\"rzones\" value={totimeZone}  onChange={e =>setToTime(e.target.value)} />\n    <datalist id=\"rzones\">\n    {timeZones.map((timezone) => <option value={timezone}>{timezone}</option>)}\n    </datalist>\n    <hr/>\n\n    </div>    \n    </div>\n</div>\n</Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}